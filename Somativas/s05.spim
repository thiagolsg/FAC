.data
	input:		.space 32
	base64:		.asciiz "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
	new_line:	.asciiz		"\n"         # newline
	resultado:	.space 64
	
.text
	.globl main

main:	

	li $v0, 8
	la $a0, input
	li $a1, 32
	syscall
	 
	la $s0, input
	
	jal strlen
	
	add $s1, $zero, $v0
		
	mul $t0, $s1, 4
	
	div $t1, $t0, 3
	
	add $s2, $t1, 4
	
	sll $a0, $s2, 2 
	li $v0, 9    
	syscall
	
	move $s2, $v0
	
	li $t0, 0 #add $t0, $zero, $zero
	li $t1, 0 #add $t1, $zero, $zero
	li $t2, 0 #add $t2, $zero, $zero
	li $t3, 0 #add $t3, $zero, $zero
	
	li $s3, 0
	
	li $s4, 0
	
	sub $t1, $s1, 1
	
inicio_loop:
	# for 
	bgt $t0, $t1, fim_loop
	add $t7, $s0, $t0
	lb $a0, 0($t7)
	
	addi $t0, $t0, 1
	
	beq $s3, 0, ins_buffer_0
	beq $s3 1, ins_buffer_1
	beq $s3, 2, ins_buffer_2
		
	j inicio_loop
	
loop:		
	addi $s3, $s3, 1
	beq $s3, 3, processar
	j inicio_loop
	
ins_buffer_0:	

	la $s5, ($a0)
	j loop
	
ins_buffer_1:	
	la $s6, ($a0)
	j loop

ins_buffer_2:	
	la $s7, ($a0)
	j loop
	
processar:
	mul $t4, $s4, 4
	
	srl $t5, $s5, 2 
	add $t6, $s2, $t4
	lbu $t4, base64($t5) 
	sw $t4, 0($t6)
		
	addi $s4, $s4, 1
	mul $t4, $s4, 4
		
	and $t5, $s5, 0x03
	sll $t6, $t5, 4
	
	srl $t2, $s6, 4
	
	add $t3, $t6, $t2
	
	add $t6, $s2, $t4
	lbu $t4, base64($t3) 
	sw $t4, 0($t6)
		
	addi $s4, $s4, 1
	mul $t4, $s4, 4
	
	and $t3, $s6, 0x0f
	sll $t6, $t3, 2
	
	srl $t2, $s7, 6
	
	add $t3, $t6, $t2
	
	add $t6, $s2, $t4
	lbu $t4, base64($t3) 
	sw $t4, 0($t6)
		
	addi $s4, $s4, 1
	mul $t4, $s4, 4	
	
	and $t5, $s7, 0x3f 
	add $t6, $s2, $t4
	lbu $t4, base64($t5) 
	sw $t4, 0($t6)
				
	addi $s4, $s4, 1
	
	li $s3, 0
	
	j inicio_loop
	
fim_loop:		

	li $t0, 1
	slt $t1, $s3, $t0
	bne $t1, 1, processar2
	
	j finalizar
	
processar2:
	mul $t4, $s4, 4
	
	srl $t5, $s5, 2 # buffer[0] >> 2
	add $t6, $s2, $t4
	lbu $t4, base64($t5) # base46_map[buffer[0] >> 2]
	sw $t4, 0($t6)
			
	addi $s4, $s4, 1
	
	beq $s3, 1, processar3
	
	mul $t4, $s4, 4
		
	and $t5, $s5, 0x03
	sll $t6, $t5, 4
	
	srl $t2, $s6, 4
	
	add $t3, $t6, $t2
	
	add $t6, $s2, $t4
	lbu $t4, base64($t3) # base46_map[buffer[0] >> 2]
	sw $t4, 0($t6)
		
	addi $s4, $s4, 1
	
	mul $t4, $s4, 4

	and $t3, $s6, 0x0f
	sll $t3, $t3, 2
	
	add $t6, $s2, $t4
	lbu $t4, base64($t3) # base46_map[buffer[0] >> 2]
	sw $t4, 0($t6)
		
	addi $s4, $s4, 1
	
	mul $t4, $s4, 4
	add $t6, $s2, $t4
	
	li $t4, 61
	sw $t4, 0($t6)
		
	addi $s4, $s4, 1

	j finalizar

processar3:
	mul $t4, $s4, 4
	
	and $t5, $s5, 0x03
	sll $t3, $t5, 4
		
	add $t6, $s2, $t4
	lbu $t4, base64($t3) # base46_map[buffer[0] >> 2]
	sw $t4, 0($t6)
		
	addi $s4, $s4, 1
	mul $t4, $s4, 4
	
	add $t6, $s2, $t4
	
	li $t4, 61
	sw $t4, 0($t6)
			
	addi $s4, $s4, 1
	
	mul $t4, $s4, 4
	add $t6, $s2, $t4
	
	li $t4, 61
	sw $t4, 0($t6)
		
	addi $s4, $s4, 1
		
	j finalizar

finalizar:

	addi $t1, $zero, 0
	la $a0, resultado
	
printar_novo:

	beq $t1, $s4, quit
	
	mul $t4, $t1, 4
	
	add $t2, $s2, $t4
	la $t3, 0($t2)
	la $t7, 0($t3)
	
	la $a1, ($t7)
    	jal concatenate
        
        addi $t1, $t1, 1
		
	j printar_novo

strlen:
	li $t0, 0
	li $t2, 0
	
strlen_loop:
	add $t2, $a0, $t0
	lb $t1, 0($t2)
	beqz $t1, strlen_exit
	addiu $t0, $t0, 1
	j strlen_loop
		
strlen_exit:
	sub $t0, $t0, 1
	add $v0, $zero, $t0
	add $t0, $zero, $zero
	jr $ra
	
concatenate:
	lb $v0, 0($a1)
	beqz $v0, concatenate_finalizado

	sb $v0, 0($a0)

	addi $a0, $a0,1
	addi $a1, $a1,1
	j concatenate

concatenate_finalizado:
	sb $zero,0($a0)
	jr $ra
	
quit:
	#la $a0, resultado
	
	#add	$a0, $0, $0	# $s2 = 0
	#addi	$a0, $0, '\0'	# $s2 = '\n'

	#sub $t5, $t1, 2
	
	#mul $t4, $t5, 4
	#add $t6, $a0, $t4
	#sw $0, 0($t6)
	
	#li $t0, 'A'
    	#sb $t0, 0($t6)
	
	#li $t4, 65
	#sw $t4, 0($a0)
	
	#add $t4, $t1, 2
	#add $t6, $a0, $t4
	#sb $t0, 0($t6)


	# printar o base64
	li $v0, 4
	la $a0, resultado
	syscall
    
	# nova linha
	li $v0, 4 
	la $a0, new_line
	syscall
	
	li $v0, 10
	syscall
